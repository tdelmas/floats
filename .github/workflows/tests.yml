name: Tests

on:
  push:
    branches: ["main"]
    paths:
    - 'typed_floats/**'
    - 'typed_floats_macros/**'
    - 'Cargo.toml'
    - 'Cargo.lock'
  pull_request:
    branches: ["main"]
    paths:
    - 'typed_floats/**'
    - 'typed_floats_macros/**'
    - 'Cargo.toml'
    - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0 

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    name: Tests on rust ${{ matrix.version }} features "${{ matrix.features }}"
    strategy:
      matrix:
        version: [
          "beta",
          "stable",
          "1.70",
        ]
        features: [
            "",
            "std",
            "serde",
            "libm",
            "std,serde",
            "std,libm",
            "serde,libm",
            "std,serde,libm",
        ]

    steps:
      - uses: actions/checkout@v3
      - run: rustup default ${{ matrix.version }}
      - run: cargo xtask pre-build
      # Check that it builds with all features combinations
      - run: cd typed_floats && cargo build --no-default-features --features "${{ matrix.features }}"
      # Check that it builds in release mode with all features combinations
      - run: cd typed_floats && cargo build --release --no-default-features --features "${{ matrix.features }}"
      # Check that it builds test in release mode with all features combinations
      - run: cd typed_floats && cargo test --no-run --release --no-default-features --features "${{ matrix.features }}"

  test-sh:
    runs-on: ubuntu-latest
    name: Tests on rust toolchain ${{ matrix.version }}
    strategy:
      matrix:
        version: [
          "beta",
          "stable",
          "1.70",
        ]

    steps:
      - uses: actions/checkout@v3
      - run: rustup default ${{ matrix.version }}
      - run: cargo --version
      - run: cargo xtask pre-build
      - run: cd typed_floats && ./tests-ci.sh
        
  clippy:
    runs-on: ubuntu-latest
    name: Clippy

    steps:
      - uses: actions/checkout@v3
      - run: cargo xtask pre-build
      - run: cargo clippy --verbose --all-features

  publish-dry-run:
    runs-on: ubuntu-latest
    name: Publish dry run

    steps:
      - uses: actions/checkout@v3
      - run: cargo xtask pre-build
      - run: cd typed_floats && cargo publish --allow-dirty --dry-run
    